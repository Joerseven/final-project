!function(e,t,r,i,n){var u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},l="function"==typeof u.parcelRequire71f1&&u.parcelRequire71f1,s=l.cache||{},o="undefined"!=typeof module&&"function"==typeof module.require&&module.require.bind(module);function a(t,r){if(!s[t]){if(!e[t]){var i="function"==typeof u.parcelRequire71f1&&u.parcelRequire71f1;if(!r&&i)return i(t,!0);if(l)return l(t,!0);if(o&&"string"==typeof t)return o(t);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}d.resolve=function(r){return e[t][1][r]||r},d.cache={};var h=s[t]=new a.Module(t);e[t][0].call(h.exports,d,h,h.exports,this)}return s[t].exports;function d(e){return a(d.resolve(e))}}a.isParcelRequire=!0,a.Module=function(e){this.id=e,this.bundle=a,this.exports={}},a.modules=e,a.cache=s,a.parent=l,a.register=function(t,r){e[t]=[function(e,t){t.exports=r},{}]},Object.defineProperty(a,"root",{get:function(){return u.parcelRequire71f1}}),u.parcelRequire71f1=a;for(var h=0;h<t.length;h++)a(t[h])}({"6puQ6":[function(e,t,r){var i=e("@parcel/transformer-js/lib/esmodule-helpers.js");i.defineInteropFlag(r);var n=e("./bn.min.mjs"),u=i.interopDefault(n);e("./openpgp.min.mjs");var l=arguments[3];
/*! OpenPGP.js v5.0.0-2 - 2021-04-27 - this is LGPL licensed code, see LICENSE/our website https://openpgpjs.org/ for more information.*/"undefined"!=typeof window?window:void 0!==l||"undefined"!=typeof self&&self;class s{constructor(e){if(void 0===e)throw Error("Invalid BigInteger input");this.value=new u.default(e)}clone(){const e=new s(null);return this.value.copy(e.value),e}iinc(){return this.value.iadd(new u.default(1)),this}inc(){return this.clone().iinc()}idec(){return this.value.isub(new u.default(1)),this}dec(){return this.clone().idec()}iadd(e){return this.value.iadd(e.value),this}add(e){return this.clone().iadd(e)}isub(e){return this.value.isub(e.value),this}sub(e){return this.clone().isub(e)}imul(e){return this.value.imul(e.value),this}mul(e){return this.clone().imul(e)}imod(e){return this.value=this.value.umod(e.value),this}mod(e){return this.clone().imod(e)}modExp(e,t){const r=t.isEven()?u.default.red(t.value):u.default.mont(t.value),i=this.clone();return i.value=i.value.toRed(r).redPow(e.value).fromRed(),i}modInv(e){if(!this.gcd(e).isOne())throw Error("Inverse does not exist");return new s(this.value.invm(e.value))}gcd(e){return new s(this.value.gcd(e.value))}ileftShift(e){return this.value.ishln(e.value.toNumber()),this}leftShift(e){return this.clone().ileftShift(e)}irightShift(e){return this.value.ishrn(e.value.toNumber()),this}rightShift(e){return this.clone().irightShift(e)}equal(e){return this.value.eq(e.value)}lt(e){return this.value.lt(e.value)}lte(e){return this.value.lte(e.value)}gt(e){return this.value.gt(e.value)}gte(e){return this.value.gte(e.value)}isZero(){return this.value.isZero()}isOne(){return this.value.eq(new u.default(1))}isNegative(){return this.value.isNeg()}isEven(){return this.value.isEven()}abs(){const e=this.clone();return e.value=e.value.abs(),e}toString(){return this.value.toString()}toNumber(){return this.value.toNumber()}getBit(e){return this.value.testn(e)?1:0}bitLength(){return this.value.bitLength()}byteLength(){return this.value.byteLength()}toUint8Array(e="be",t){return this.value.toArrayLike(Uint8Array,e,t)}}r.default=s},{"./bn.min.mjs":"6H3A1","./openpgp.min.mjs":"3USJO","@parcel/transformer-js/lib/esmodule-helpers.js":"5J4vU"}]},[]);